---
layout: getting_started
title: 12 입출력 - IO
guide: 12
---

# {{ page.title }}

  <div class="toc"></div>

이번장은 [`IO`](/docs/stable/elixir/IO.html), [`File`](/docs/stable/elixir/File.html)과 [`Path`](/docs/stable/elixir/Path.html)등의 입출력 장치와 관련된 모듈에 대해 소개합니다.

This chapter is a quick introduction to input/output mechanisms in Elixir and related modules, like [`IO`](/docs/stable/elixir/IO.html), [`File`](/docs/stable/elixir/File.html) and [`Path`](/docs/stable/elixir/Path.html).

이번장은 앞에서 살펴본 Getting Started 가이드에서 이미 살짝 맛본 내용들입니다. 하지만, 입출력 시스템은 Elixir와 VM에 대한 몇가지 철학을 살펴 볼 수 있게 해줍니다.

We had originally sketched this chapter to come much earlier in the getting started guide. However, we noticed the IO system provides a great opportunity to shed some light on some philosophies and curiosities of Elixir and the VM.

## 12.1 입출력 모듈 - The IO module

Elixir의 `IO` 모듈은 표준 입출력(`:stdio`), 표준 오류(`:stderr`), 파일 그리고 다른 입출력 장치를 읽고 쓸 수 있는 기본 메카니즘입니다. 모듈 사용법은 직관적입니다:

The `IO` module in Elixir is the main mechanism for reading and writing to the standard io (`:stdio`), standard error (`:stderr`), files and other IO devices. Usage of the module is pretty straight-forward:

```iex
iex> IO.puts "hello world"
"hello world"
:ok
iex> IO.gets "yes or no? "
yes or no? yes
"yes\n"
```

기본적으로 입출력 모듈의 함수는 표준 입력과 표준 출력을 사용합니다. `:stderr` 인자를 전달하여 표준 오류 장치로 출력 할 수 있습니다:

By default, the functions in the IO module use the standard input and output. We can pass the `:stderr` as argument to write to the standard error device:

```iex
iex> IO.puts :stderr, "hello world"
"hello world"
:ok
```

## 12.2 파일 모듈 - The File module

[`File`](/docs/stable/elixir/File.html)모듈은 파일을 입출력 장치로 열 수 있는 기능을 가지고 있습니다. 기본적으로 파일은 바이너리 모드로 열립니다. `IO`모듈의 `IO.binread/2`와 `IO.binwrite/2`를 사용하여 파일에 데이터를 쓰거나 읽을수 있습니다:

The [`File`](/docs/stable/elixir/File.html) module contains functions that allows us to open files as IO devices. By default, files are opened in binary mode, which requires developers to use the specific `IO.binread/2` and `IO.binwrite/2` functions from the `IO` module:

```iex
iex> {:ok, file} = File.open "hello", [:write]
{:ok, #PID<0.47.0>}
iex> IO.binwrite file, "world"
:ok
iex> File.close file
:ok
iex> File.read "hello"
{:ok, "world"}
```

파일은 `:utf8` 인코딩으로 열수도 있고 `IO`모듈의 다른 함수에서도 사용할 수 있습니다:

A file can also be opened with `:utf8` encoding which allows the remaining functions in the `IO` module to be used:

```iex
iex> {:ok, file} = File.open "another", [:write, :utf8]
{:ok, #PID<0.48.0>}
```

한편, 파일을 열거나 읽고 쓰는 함수는 `File`모듈이 파일 시스템상에서 동작하는 기능을 많이 가지고 있습니다. 예를들어 `File.rm/1`은 파일을 삭제하는 데 사용할 수 있고, `File.mkdir/1`은 디렉토리를 만들고 `File.mkdir_p/1`은 부모 디렉토리가 없으면 생성해주고 `File.cp_r/2`과 `File.rm_rf/2`는 파일과 디렉토리를 재귀적으로 복사하고 삭제합니다.

Besides functions for opening, reading and writing files, the `File` module has many functions that work on the file system. Those functions are named after their UNIX equivalents. For example, `File.rm/1` can be used to remove files, `File.mkdir/1` to create directories, `File.mkdir_p/1` creates directories guaranteeing their parents exists and there is even `File.cp_r/2` and `File.rm_rf/2` which copy and remove files and directories recursively.

`File`모듈의 함수에는 2가지 종류의 관습이 있습니다. 하나는 `!`(뱅이라고 읽습니다)이고 다른 하나는 뱅이 없습니다. 예를들어 "hello"라는 파일을 읽을 때, 위의 예에서는 `!`없이 사용했습니다. 몇 가지 새로운 예제를 시도해봅시다:

You will also notice that functions in the `File` module have two variants, one with `!` (bang) in its name and others without. For example, when we read the "hello" file above, we have used the one without `!`. Let's try some new examples:

```iex
iex> File.read "hello"
{:ok, "world"}
iex> File.read! "hello"
"world"
iex> File.read "unknown"
{:error, :enoent}
iex> File.read! "unknown"
** (File.Error) could not read file unknown: no such file or directory
```

파일이없는 경우 `!`가 붙은 버전에서는 오류가 발생하고 있습니다. 즉 `!`이 없는 버전은 패턴 매칭을 이용하여 다양한 형태의 처리를 위해 선택합니다. 그러나 만약 파일이 존재할것같으면, 뱅을 다는것이 예외 오류 메시지를 알 수 있기 때문에 유용합니다.즉 절대로 이렇게 쓰지 마십시요:

Notice that when the file does not exist, the version with `!` raises an error. That said, the version without `!` is preferred when you want to handle different outcomes with pattern matching. However, if you expect the file to be there, the bang variation is more useful as it raises a meaningful error message. That said, never write:

```elixir
{:ok, body} = File.read(file)
```

대시 아래와 같이:

Instead write:

```elixir
case File.read(file) do
  {:ok, body} -> # handle ok
  {:error, r} -> # handle error
end
```

또는

or

```elixir
File.read!(file)
```

## 12.3 Path 모듈 - The Path module

파일 모듈의 함수들은 인자로 경로를 포함해야합니다. 대부분의 경우 이러한 경로는 바이너리이며 [`Path`](/docs/stable/elixir/Path.html)모듈로 조작할수 있습니다:

The majority of the functions in the File module expects paths as arguments. Most commonly, those paths will be binaries and they can be manipulated with the [`Path`](/docs/stable/elixir/Path.html) module:

```iex
iex> Path.join("foo", "bar")
"foo/bar"
iex> Path.expand("~/hello")
"/Users/jose/hello"
```

지금까지 파일 시스템을 통한 입출력의 주요 모듈에 대해 살펴봤습니다. 이제는 좀 더 고급 입출력에 대해 이야기하겠습니다. 이 섹션에서는 Elixir 코드를 작성할 필요가 없습니다. 그러니 편하게 살펴보세요. 하지만 VM에서 입출력 시스템이 어떻게 구현되는지에 대한 overview가 제공됩니다.

With this we have covered the main modules for doing IO and interacting with the file system. Next we will discuss some curiosities and advanced topics regarding IO. Those sections are not necessary to write Elixir code, so feel free to skip them, but they do provide an overview of how the IO system is implemented in the VM and other curiosities.

## 12.4 프로세스와 그룹 리더 - Processes and group leaders

`File.open/2`가 PID를 포함한 튜플을 리턴하는것을 눈치채셨을겁니다:

You may have noticed that `File.open/2` returned a tuple containing a PID:

```iex
iex> {:ok, file} = File.open "hello", [:write]
{:ok, #PID<0.47.0>}
```

실제로는 입출력 모듈이 프로세스와 같이 동작하고 있기 때문입니다. `IO.write(pid, binary)`라고 쓰면 입출력 모듈은 메시지를 원하는 오퍼레이션(operation)과 함께 프로세스에 보냅니다. 만약 내 자신(own)의 프로세스를 사용하면 무슨일이 있어나는지 살펴봅시다:

That's because the IO module actually works with processes. When you say `IO.write(pid, binary)`, the IO module will send a message to the process with the desired operation. Let's see what happens if we use our own process:

```iex
iex> pid = spawn fn ->
...>  receive do: (msg -> IO.inspect msg)
...> end
#PID<0.57.0>
iex> IO.write(pid, "hello")
{:io_request, #PID<0.41.0>, #PID<0.57.0>, {:put_chars, :unicode, "hello"}}
** (ErlangError) erlang error: :terminated
```

`IO.write/2`를 호출하면 IO 모듈로 요청이 보내진걸 볼수 있습니다. 그러고나서는 실패합니다. 왜냐면 IO module이 뭔가 결과 같은것을 원했기 때문입니다.

After `IO.write/2`, we can see the request sent by the IO module printed, which then fails since the IO module expected some kind of result that we did not supply.

[`StringIO`](/docs/stable/elixir/StringIO.html)모듈은 문자열에 대해 입출력 장치 메시지 구현을 제공합니다:

The [`StringIO`](/docs/stable/elixir/StringIO.html) module provides an implementation of the IO device messages on top of a string:

```iex
iex> {:ok, pid} = StringIO.open("hello")
{:ok, #PID<0.43.0>}
iex> IO.read(pid, 2)
"he"
```

입출력 장치와 프로세스를 모델링하여 Erlang VM은 동일한 네트워크의 다른 노드간에 파일 프로세스를 교환하거나 두 노드간에 파일을 읽고 쓸 수 있습니다. 모든 입출력 장치을 소유하는 특별한 그룹 리더가 있습니다.

By modelling IO devices with processes, the Erlang VM allows different nodes in the same network to exchange file processes to read/write files in between nodes. Of all IO devices, there is one that is special to each process, called group leader.

`:stdio`에 쓸때 실제로는 메시지를 그룹 리더한테 보내고 있습니다. 그룹 리더는 STDIO 파일 디스크립터로 써 넣습니다:

When you write to `:stdio`, you are actually sending a message to the group leader, which writes to STDIO file descriptor:

```iex
iex> IO.puts :stdio, "hello"
hello
:ok
iex> IO.puts Process.group_leader, "hello"
hello
:ok
```

그룹 리더는 다른 상황에서 사용되는 프로세스마다 설정할 수 있습니다. 예를들어 원격 단말에서 코드를 실행할 때 원격 노드의 메시지는 로컬 터미널로 다시 보내져서 출력됨을 보장됩니다.

The group leader can be configured per process and is used in different situations. For example, when executing code in a remote terminal, it guarantees messages in a remote node are redirected and printed in the terminal that triggered the request.

## 12.5 `iodata`と`chardata` - `iodata` and `chardata`

上でみた全ての例ではファイルへの書き込みにバイナリ/文字列を利用していました．この章のタイトルは"Binaries, strings and char lists"です，以前に，文字列が単なるバイトである一方文字リストはコードポイントのリストであると言いました．

In all examples above, we have used binaries/strings when writing to files. In the chapter "Binaries, strings and char lists", we mentioned how strings are simply bytes while char lists are lists with code points.

`IO`と`File`の関数は引数としてリストも取れます．それだけではなく，数値とバイナリが混在したリストのリストも取れます:

The functions in `IO` and `File` also allow lists to be given as arguments. Not only that, they also allow a mixed list of lists, integers and binaries to be given:

```iex
iex> IO.puts 'hello world'
hello world
:ok
iex> IO.puts ['hello', ?\s, "world"]
hello world
:ok
```

しかし，これには少し気をつけないといけません．リストは，IOデバイスのエンコーディングの依存を利用して，バイトのかたまり，あるいは文字のかたまりで表現されます．もしファイルがエンコーディングなしで開かれたら，ファイルはrawモードを期待しており，`IO`モジュールの関数は必ず`bin*`ではじまるものが使われます．それらの関数は引数として`iodata`を期待しています，つまりバイト及びバイナリからなるリストが渡されることを期待しているということです．

However, this requires some attention. A list may represent either a bunch of bytes or a bunch of characters and which one to use depends on the encoding of the IO device. If the file is opened without encoding, the file is expected to be in raw mode, and the functions in the `IO` module starting with `bin*` must be used. Those functions expect an `iodata` as argument, i.e. it expects a list of integers representing bytes and binaries to be given.

一方で`:stdio`と`:utf8`のエンコーディングを指定して開いたファイルは`IO`モジュールの残り(訳注`bin*`ではじまらない？)関数で動き，引数として`char_data`を期待します，つまり文字と文字列からなるリストが渡されることを期待しているということです．

On the other hand, `:stdio` and files opened with `:utf8` encoding work with the remaining functions in the `IO` module and those expect a `char_data` as argument, i.e. they expect a list of characters or strings to be given.

とはいえこれはちょっとした違いにすぎず．リストをそれらの関数へ渡そうと意図している場合にだけ詳しく検討すればよいです．バイナリは既にバイト表現されているので，常にrawで扱うことができます．

Although this is a subtle difference, you only need to worry about those details if you intend to pass lists to those functions. Binaries are already represented by the underlying bytes and as such their representation is always raw.

これで入出力デバイスと入出力に関連した機能をざっと見終わりました．[`IO`](/docs/stable/elixir/IO.html)，[`File`](/docs/stable/elixir/File.html)，[`Path`](/docs/stable/elixir/Path.html)と[`StringIO`](/docs/stable/elixir/StringIO.html)というElixirのモジュールについてや，どのようにVMが入出力の機構をうまく使うか，どのように入出力の操作に(charとioの)データを利用するかについて学びました．

This finishes our tour of IO devices and IO related functionality. We have learned about four Elixir modules, [`IO`](/docs/stable/elixir/IO.html), [`File`](/docs/stable/elixir/File.html), [`Path`](/docs/stable/elixir/Path.html) and [`StringIO`](/docs/stable/elixir/StringIO.html), as well as how the VM uses processes for the underlying IO mechanisms and how to use (char and io) data for IO operations.
